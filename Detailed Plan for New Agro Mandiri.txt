Detailed Plan for New Agro Mandiri Admin Dashboard
Based on my analysis of the existing codebase, here's a revised plan for rebuilding the Agro Mandiri e-commerce admin dashboard with better structure, organization, and maintainability.

1. Project Architecture

1.1 Directory Structure

src/
├── api/                    # API abstraction layer
│   ├── supabase/           # Supabase specific implementation
│   ├── hooks/              # React Query hooks for data fetching
│   └── types/              # Shared TypeScript types
├── components/
│   ├── ui/                 # Shadcn UI components (keep existing)
│   ├── common/             # Shared components
│   └── admin/              # Admin-specific components
│       ├── layout/         # Layout components
│       ├── products/       # Product management components
│       ├── categories/     # Category management components
│       └── shared/         # Admin shared components
├── context/                # React Context providers
├── lib/                    # Utility functions & libraries
├── app/                    # Next.js App Router
│   ├── admin/              # Admin routes
│   │   ├── layout.tsx      # Admin layout
│   │   ├── page.tsx        # Dashboard overview
│   │   ├── products/       # Product management pages
│   │   ├── categories/     # Category management pages
│   │   └── settings/       # Settings pages

1.2 Core Architectural Principles
Separation of Concerns: Clearly separate UI, data fetching, and business logic
Component Modularity: Small, focused components with clear responsibilities
Consistent Data Flow: Unified approach to data fetching and state management
Progressive Enhancement: Start with core functionality, enhance later

2. Technology Stack & Libraries
Framework: Next.js 15 with App Router (existing)
UI Components: Shadcn UI + Tailwind CSS (existing)
Data Fetching: React Query for efficient caching and state management
Form Management: React Hook Form + Zod validation
Database: Supabase (existing)
Authentication: Supabase Auth with middleware for protected routes
State Management: React Context + React Query for server state

3. Implementation Plan by Module
3.1 Core Infrastructure
Project Setup
Initialize Next.js project with TypeScript
Configure Tailwind CSS and Shadcn UI
Set up Supabase client and authentication
API Layer
Create abstraction for Supabase interactions
Implement React Query hooks for data fetching
Set up TypeScript interfaces for data models
Authentication
Implement login/logout functionality
Add protected routes middleware
Create authentication context provider

3.2 Admin Dashboard Framework
Admin Layout
Create responsive sidebar navigation
Implement header with user profile dropdown
Add breadcrumb navigation
Dashboard Overview
Build dashboard overview with key metrics
Implement stats cards for products, orders, customers
Add recent activity timeline

3.3 Product Management
Product Listing
Implement product table with pagination
Add filtering and sorting capabilities
Create quick action buttons
Product Form
Build modular product form with validation
Split into tabs for better organization:
Basic Info: Name, description, price, etc.
Inventory: Stock, SKU, dimensions, etc.
Images: Image management with preview
SEO: Meta tags, keywords, etc.
Implement real-time validation with Zod
Add form submission with optimistic updates
Product Image Handling
Create dedicated component for image uploads
Implement drag-and-drop functionality
Add image reordering capability

3.4 Category Management
Category Listing
Implement category table with tree view
Add inline editing capability
Create quick action buttons
Category Form
Build category form with validation
Implement parent category selection
Add metadata fields

3.5 Testing & Quality Assurance
Unit Tests
Write tests for critical components
Test data fetching hooks and validation
Integration Tests
Test form submissions and data flow
Verify authentication and authorization
Manual Testing
Perform end-to-end testing of key workflows
Test responsive design on various devices

4. Database Schema
4.1 Products Table

sql
CREATE TABLE products (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name VARCHAR(255) NOT NULL,
  slug VARCHAR(255) NOT NULL UNIQUE,
  description TEXT,
  price DECIMAL(10,2) NOT NULL,
  sale_price DECIMAL(10,2),
  stock_quantity INTEGER NOT NULL DEFAULT 0,
  is_featured BOOLEAN DEFAULT FALSE,
  is_active BOOLEAN DEFAULT TRUE,
  category_id UUID REFERENCES categories(id),
  sku VARCHAR(50) UNIQUE,
  weight DECIMAL(10,2),
  dimensions VARCHAR(50),
  brand VARCHAR(100),
  meta_title VARCHAR(100),
  meta_description VARCHAR(255),
  keywords VARCHAR(255),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

4.2 Categories Table

sql

CREATE TABLE categories (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name VARCHAR(100) NOT NULL,
  slug VARCHAR(100) NOT NULL UNIQUE,
  description TEXT,
  parent_id UUID REFERENCES categories(id),
  is_active BOOLEAN DEFAULT TRUE,
  display_order INTEGER DEFAULT 0,
  meta_title VARCHAR(100),
  meta_description VARCHAR(255),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

4.3 Product Images Table

CopyInsert
CREATE TABLE product_images (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  product_id UUID NOT NULL REFERENCES products(id) ON DELETE CASCADE,
  image_url TEXT NOT NULL,
  alt_text VARCHAR(255),
  display_order INTEGER DEFAULT 0,
  is_primary BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

5. Key Components & Features
5.1 Admin Dashboard Components
DataTable: Reusable table with sorting, filtering, pagination
ImageUploader: Drag-and-drop image upload with preview
FormTabs: Tabbed form interface for complex forms
ActionButtons: Standardized action buttons for CRUD operations
FilterBar: Advanced filtering for product/category lists
SearchInput: Global search functionality

5.2 Data Management Patterns
React Query Hooks: Custom hooks for each data type:

typescript
// Example: Product hooks
useProducts() // Fetch products list
useProduct(id) // Fetch single product
useCreateProduct() // Create new product
useUpdateProduct() // Update existing product
useDeleteProduct() // Delete product
Form State Management:
typescript
CopyInsert
// Example: Product form
const { register, handleSubmit, control, formState: { errors } } = useForm<ProductFormValues>({
  resolver: zodResolver(productSchema),
  defaultValues: initialData
});

6. Implementation Sequence
First Phase: Project setup, API layer, authentication, admin layout
Second Phase: Dashboard overview, product listing and form
Third Phase: Category management, product image handling
Final Phase: Testing, bug fixes, documentation

7. Development Approach

Component-First Development:
Build and test components in isolation
Compose larger features from proven components

Incremental Feature Rollout:
Start with core functionality (products, categories)
Add more advanced features after core is stable

Continuous Testing:
Write tests alongside components
Validate features before moving to next task

Documentation:
Document components and APIs
Create usage examples for future reference